# ********RoostGPT********

# Test generated by RoostGPT for test claude-karate using AI Type Claude AI and AI Model claude-3-opus-20240229
# 
# Feature file generated for /laureates_get for http method type GET 
# RoostTestHash=59fb209b6a
# 
# 

# ********RoostGPT********
Feature: Test /2.1/laureates endpoint

Background:
  * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:8080')
  * url urlBase


Scenario: Test GET /2.1/laureates with valid parameters
  Given path '/2.1/laureates'
  And param offset = 1
  And param limit = 10
  And param sort = 'asc'
  And param ID = 123
  And param name = 'John Doe'
  And param gender = 'male'
  And param motivation = 'motivation text'
  And param affiliation = 'affiliation name'
  And param residence = 'residence place'
  And param birthDate = '1950-01-01'
  And param birthDateTo = '1960-12-31'
  And param deathDate = '2000-01-01'
  And param deathDateTo = '2010-12-31'
  And param foundedDate = '1980-01-01'
  And param birthCity = 'birth city'
  And param birthCountry = 'birth country'
  And param birthContinent = 'Europe'
  And param deathCity = 'death city'
  And param deathCountry = 'death country'
  And param deathContinent = 'North America'
  And param foundedCity = 'founded city'
  And param foundedCountry = 'founded country'
  And param foundedContinent = 'Asia'
  And param HeadquartersCity = 'HQ city'
  And param HeadquartersCountry = 'HQ country'
  And param HeadquartersContinent = 'Africa'
  And param nobelPrizeYear = 2000
  And param yearTo = 2010
  And param nobelPrizeCategory = 'phy'
  And param format = 'json'
  And param csvLang = 'en'
  When method GET
  Then status 200
  And match response.laureates == '#[_ > 0]'
  And match each response.laureates contains { id: '#number', wikipedia: '#object', wikidata: '#object', sameAs: '#array', links: '#array', nobelPrizes: '#[_ > 0]' }
  And match response.meta.count == '#number'
  And match response.links == '#array'

Scenario: Test GET /2.1/laureates with invalid parameters
  Given path '/2.1/laureates'
  And param offset = 'invalid'
  When method GET
  Then status 400
  And match response == { code: '#string', message: '#string' }

Scenario: Test GET /2.1/laureates with non-existent resource
  Given path '/2.1/laureates'
  And param ID = 999999
  When method GET
  Then status 404
  And match response == { code: '#string', message: '#string' }

# ********RoostGPT********

# Test generated by RoostGPT for test claude-karate using AI Type Claude AI and AI Model claude-3-opus-20240229
# 
# Feature file generated for /laureate/{laureateID}_get for http method type GET 
# RoostTestHash=81e2a40d4b
# 
# 

# ********RoostGPT********
Feature: Nobel Prize Laureate API

Background:
  * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:8080')
  * url urlBase

  * def laureateExample =
  """
  {
    "id": 456,
    "laureateIfPerson": {
      "knownName": {
        "en": "English",
        "se": "Svenska",
        "no": "Norsk"
      },
      "givenName": {
        "en": "English",
        "se": "Svenska",
        "no": "Norsk"  
      },
      "familyName": {
        "en": "English",
        "se": "Svenska",
        "no": "Norsk"
      },
      "fullName": {
        "en": "English",
        "se": "Svenska",
        "no": "Norsk"
      },
      "filename": "filename",
      "penname": "Penname",
      "gender": "female",
      "birth": {
        "date": "1989-04-25",
        "place": {
          "city": {
            "en": "English",
            "se": "Svenska",
            "no": "Norsk"
          },
          "country": {
            "en": "English",
            "se": "Svenska",
            "no": "Norsk"
          },
          "cityNow": {
            "en": "English",
            "se": "Svenska",
            "no": "Norsk",
            "sameAs": ["https://"]
          },
          "countryNow": {
            "en": "English",
            "se": "Svenska",
            "no": "Norsk",
            "sameAs": ["https://"]
          },
          "continent": {
            "en": "English",
            "se": "Svenska",
            "no": "Norsk"
          },
          "locationString": {
            "en": "English",
            "se": "Svenska",
            "no": "Norsk"
          }
        }
      },
      "death": {
        "date": "1989-04-25",
        "place": {
          "city": {
            "en": "English",
            "se": "Svenska",
            "no": "Norsk"
          },
          "country": {
            "en": "English",
            "se": "Svenska",
            "no": "Norsk"
          },
          "cityNow": {
            "en": "English",
            "se": "Svenska",
            "no": "Norsk",
            "sameAs": ["https://"]
          },
          "countryNow": {
            "en": "English",
            "se": "Svenska",
            "no": "Norsk",
            "sameAs": ["https://"]
          },
          "continent": {
            "en": "English",
            "se": "Svenska",
            "no": "Norsk"
          },
          "locationString": {
            "en": "English",
            "se": "Svenska",
            "no": "Norsk"
          }
        }
      }
    },
    "wikipedia": {
      "slug": "slug",
      "english": "https://en.wikipedia.org/wiki/"
    },
    "wikidata": {
      "id": "id",
      "url": "https://www.wikidata.org/wiki/"
    },
    "sameAs": ["https://"],
    "links": [
      {
        "rel": "",
        "href": "",
        "action": "",
        "types": ""
      }
    ],
    "nobelPrizes": [
      {
        "awardYear": 1989,
        "category": {
          "en": "English",
          "se": "Svenska",
          "no": "Norsk"
        },
        "categoryFullName": {
          "en": "English",
          "se": "Svenska",
          "no": "Norsk"
        },
        "sortOrder": "1",
        "portion": "1",
        "dateAwarded": "1989-04-25",
        "prizeStatus": "received",
        "motivation": {
          "en": "English",
          "se": "Svenska",
          "no": "Norsk"
        },
        "prizeAmount": 1000000,
        "prizeAmountAdjusted": 1000000,
        "affiliations": [
          {
            "name": {
              "en": "English",
              "se": "Svenska",
              "no": "Norsk"
            },
            "nameNow": {
              "en": "English",
              "se": "Svenska",
              "no": "Norsk"
            },
            "nativeName": "Le romenic universitet",
            "city": {
              "en": "English",
              "se": "Svenska",
              "no": "Norsk"
            },
            "country": {
              "en": "English",
              "se": "Svenska",
              "no": "Norsk"
            },
            "cityNow": {
              "en": "English",
              "se": "Svenska",
              "no": "Norsk",
              "sameAs": ["https://"]
            },
            "countryNow": {
              "en": "English",
              "se": "Svenska",
              "no": "Norsk",
              "sameAs": ["https://"]
            },
            "locationString": {
              "en": "English",
              "se": "Svenska",
              "no": "Norsk"
            }
          }
        ],
        "residences": [
          {
            "city": {
              "en": "English",
              "se": "Svenska",
              "no": "Norsk"
            },
            "country": {
              "en": "English",
              "se": "Svenska",
              "no": "Norsk"
            },
            "cityNow": {
              "en": "English",
              "se": "Svenska",
              "no": "Norsk",
              "sameAs": ["https://"]
            },
            "countryNow": {
              "en": "English",
              "se": "Svenska",
              "no": "Norsk",
              "sameAs": ["https://"]
            },
            "locationString": {
              "en": "English",
              "se": "Svenska",
              "no": "Norsk"
            }
          }
        ],
        "links": [
          {
            "rel": "",
            "href": "",
            "action": "",
            "types": ""
          }
        ]
      }
    ]
  }
  """

Scenario: Get Laureate by ID
  * def laureateID = 123
  * header Authorization = '{{$processEnvironment.AUTH_TOKEN}}'
  Given path '/2.1/laureate/', laureateID
  When method GET
  Then status 200
  And match response == laureateExample
  And match response.laureate.id == laureateID
  And match response.laureate.laureateIfPerson.knownName.en == 'English'
  And match response.laureate.laureateIfPerson.gender == 'female'
  And match response.laureate.nobelPrizes[0].awardYear == 1989
  And match response.laureate.nobelPrizes[0].prizeStatus == 'received'
  And match response.laureate.nobelPrizes[0].prizeAmount == 1000000
  And match response headers contains { Content-Type: 'application/json' }

Scenario: Get Laureate by invalid ID
  * def invalidLaureateID = 999
  * header Authorization = '{{$processEnvironment.AUTH_TOKEN}}'
  Given path '/2.1/laureate/', invalidLaureateID  
  When method GET
  Then status 404
  And match response == 
  """
  {
    "code": "404",
    "message": "There is not Laureate born that date"
  }
  """

Scenario: Get Laureate with missing ID
  * header Authorization = '{{$processEnvironment.AUTH_TOKEN}}'
  Given path '/2.1/laureate/'
  When method GET
  Then status 400
  And match response == 
  """
  {
    "code": "404",
    "message": "There is not Laureate born that date"
  }
  """

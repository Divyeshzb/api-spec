# ********RoostGPT********

# Test generated by RoostGPT for test claude-karate using AI Type Claude AI and AI Model claude-3-opus-20240229
# 
# Feature file generated for /laureates_get for http method type GET 
# RoostTestHash=59fb209b6a
# 
# 

# ********RoostGPT********
Feature: Nobel Prize Laureates API

Background:
  * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:8080')
  * url urlBase

Scenario: Get all laureates
  Given path '/2.1/laureates'
  When method GET
  Then status 200
  And match header Content-Type contains 'application/json'
  And match response.laureates == '#array'
  And match each response.laureates contains 
  """
    {
      id: '#number',
      wikipedia: {
        slug: '#string',
        english: '#string'
      },
      wikidata: {
        id: '#string',
        url: '#string'
      },
      sameAs: '##array',
      links: '##array'      
    }
  """
  And match response.meta == 
  """
    {
      offset: '#number',
      limit: '#number',
      sort: '##string',
      ID: '##number',
      name: '##string',
      gender: '##string',
      motivation: '##string',
      affiliation: '##string',
      residence: '##string',
      birthDate: '##string',
      birthDateTo: '##string',
      deathDate: '##string',
      deathDateTo: '##string',
      foundedDate: '##string',
      birthCity: '##string',
      birthCountry: '##string',
      birthContinent: '##string',
      deathCity: '##string',
      deathCountry: '##string',
      deathContinent: '##string',
      foundedCity: '##string',
      foundedCountry: '##string',
      foundedContinent: '##string',
      headquartersCity: '##string',
      headquartersCountry: '##string',
      headquartersContinent: '##string',
      nobelPrizeYear: '##number',
      yearTo: '##number',
      nobelPrizeCategory: '##string',
      count: '#number'
    }
  """
  And match response.links == '#array'

Scenario: Get laureates with query parameters
  * def params = 
  """
    {
      offset: 1,
      limit: 10,
      sort: 'asc',
      ID: 123,
      name: 'John Doe',
      gender: 'male',
      motivation: 'motivation',
      affiliation: 'affiliation',
      residence: 'residence',
      birthDate: '1900-01-01',
      birthDateTo: '1950-12-31',
      deathDate: '2000-01-01',
      deathDateTo: '2020-12-31',
      foundedDate: '1900-01-01',
      birthCity: 'birthCity',
      birthCountry: 'birthCountry',
      birthContinent: 'Europe',
      deathCity: 'deathCity',
      deathCountry: 'deathCountry',
      deathContinent: 'Europe',
      foundedCity: 'foundedCity',
      foundedCountry: 'foundedCountry',
      foundedContinent: 'Europe',
      HeadquartersCity: 'hqCity',
      HeadquartersCountry: 'hqCountry',
      HeadquartersContinent: 'Europe',
      nobelPrizeYear: 1901,
      yearTo: 2020,
      nobelPrizeCategory: 'phy',
      format: 'json',
      csvLang: 'en'
    }
  """
  Given path '/2.1/laureates'
  And params params
  When method GET
  Then status 200
  And match header Content-Type contains 'application/json'
  And match response.laureates == '#array'
  And match each response.laureates contains 
  """
    {
      id: '#number',
      wikipedia: {
        slug: '#string',
        english: '#string'
      },
      wikidata: {
        id: '#string',
        url: '#string'
      },
      sameAs: '##array',
      links: '##array'      
    }
  """
  And match response.meta == 
  """
    {
      offset: '#number',
      limit: '#number',
      sort: '##string',
      ID: '##number',
      name: '##string',
      gender: '##string',
      motivation: '##string',
      affiliation: '##string',
      residence: '##string',
      birthDate: '##string',
      birthDateTo: '##string',
      deathDate: '##string',
      deathDateTo: '##string',
      foundedDate: '##string',
      birthCity: '##string',
      birthCountry: '##string',
      birthContinent: '##string',
      deathCity: '##string',
      deathCountry: '##string',
      deathContinent: '##string',
      foundedCity: '##string',
      foundedCountry: '##string',
      foundedContinent: '##string',
      headquartersCity: '##string',
      headquartersCountry: '##string',
      headquartersContinent: '##string',
      nobelPrizeYear: '##number',
      yearTo: '##number',
      nobelPrizeCategory: '##string',
      count: '#number'
    }
  """
  And match response.links == '#array'

Scenario: Get laureates with invalid query parameters
  Given path '/2.1/laureates'
  And param invalidParam = 'invalid'
  When method GET
  Then status 400
  And match header Content-Type contains 'application/json'
  And match response == 
  """
    {
      code: '#string',
      message: '#string'
    }
  """

Scenario: Get laureates with non-existent ID
  Given path '/2.1/laureates'
  And param ID = 999999
  When method GET
  Then status 404
  And match header Content-Type contains 'application/json'
  And match response == 
  """
    {
      code: '#string',
      message: '#string'
    }
  """
